/**
 * Autogenerated by Thrift Compiler (0.8.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.jpower.sgf.net.msg;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings("all")
public class CgMockLogin implements org.apache.thrift.TBase<CgMockLogin, CgMockLogin._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CgMockLogin");

    private static final org.apache.thrift.protocol.TField SESSION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionKey", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short) 3);
    private static final org.apache.thrift.protocol.TField CUSTOM_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("customParams", org.apache.thrift.protocol.TType.MAP, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new CgMockLoginStandardSchemeFactory());
        schemes.put(TupleScheme.class, new CgMockLoginTupleSchemeFactory());
    }

    public String sessionKey; // optional
    public String userId; // required
    /**
     * url传递过来的参数
     */
    public Map<String, String> params; // optional
    /**
     * url中游戏自定义参数
     */
    public Map<String, String> customParams; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        SESSION_KEY((short) 1, "sessionKey"),
        USER_ID((short) 2, "userId"),
        /**
         * url传递过来的参数
         */
        PARAMS((short) 3, "params"),
        /**
         * url中游戏自定义参数
         */
        CUSTOM_PARAMS((short) 4, "customParams");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // SESSION_KEY
                    return SESSION_KEY;
                case 2: // USER_ID
                    return USER_ID;
                case 3: // PARAMS
                    return PARAMS;
                case 4: // CUSTOM_PARAMS
                    return CUSTOM_PARAMS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private _Fields optionals[] = {_Fields.SESSION_KEY, _Fields.PARAMS, _Fields.CUSTOM_PARAMS};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SESSION_KEY, new org.apache.thrift.meta_data.FieldMetaData("sessionKey", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.CUSTOM_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("customParams", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CgMockLogin.class, metaDataMap);
    }

    public CgMockLogin() {
    }

    public CgMockLogin(
            String userId) {
        this();
        this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CgMockLogin(CgMockLogin other) {
        if (other.isSetSessionKey()) {
            this.sessionKey = other.sessionKey;
        }
        if (other.isSetUserId()) {
            this.userId = other.userId;
        }
        if (other.isSetParams()) {
            Map<String, String> __this__params = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.params.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__params_copy_key = other_element_key;

                String __this__params_copy_value = other_element_value;

                __this__params.put(__this__params_copy_key, __this__params_copy_value);
            }
            this.params = __this__params;
        }
        if (other.isSetCustomParams()) {
            Map<String, String> __this__customParams = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.customParams.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__customParams_copy_key = other_element_key;

                String __this__customParams_copy_value = other_element_value;

                __this__customParams.put(__this__customParams_copy_key, __this__customParams_copy_value);
            }
            this.customParams = __this__customParams;
        }
    }

    public CgMockLogin deepCopy() {
        return new CgMockLogin(this);
    }

    @Override
    public void clear() {
        this.sessionKey = null;
        this.userId = null;
        this.params = null;
        this.customParams = null;
    }

    public String getSessionKey() {
        return this.sessionKey;
    }

    public CgMockLogin setSessionKey(String sessionKey) {
        this.sessionKey = sessionKey;
        return this;
    }

    public void unsetSessionKey() {
        this.sessionKey = null;
    }

    /**
     * Returns true if field sessionKey is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSessionKey() {
        return this.sessionKey != null;
    }

    public void setSessionKeyIsSet(boolean value) {
        if (!value) {
            this.sessionKey = null;
        }
    }

    public String getUserId() {
        return this.userId;
    }

    public CgMockLogin setUserId(String userId) {
        this.userId = userId;
        return this;
    }

    public void unsetUserId() {
        this.userId = null;
    }

    /**
     * Returns true if field userId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUserId() {
        return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
        if (!value) {
            this.userId = null;
        }
    }

    public int getParamsSize() {
        return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
        if (this.params == null) {
            this.params = new HashMap<String, String>();
        }
        this.params.put(key, val);
    }

    /**
     * url传递过来的参数
     */
    public Map<String, String> getParams() {
        return this.params;
    }

    /**
     * url传递过来的参数
     */
    public CgMockLogin setParams(Map<String, String> params) {
        this.params = params;
        return this;
    }

    public void unsetParams() {
        this.params = null;
    }

    /**
     * Returns true if field params is set (has been assigned a value) and false otherwise
     */
    public boolean isSetParams() {
        return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
        if (!value) {
            this.params = null;
        }
    }

    public int getCustomParamsSize() {
        return (this.customParams == null) ? 0 : this.customParams.size();
    }

    public void putToCustomParams(String key, String val) {
        if (this.customParams == null) {
            this.customParams = new HashMap<String, String>();
        }
        this.customParams.put(key, val);
    }

    /**
     * url中游戏自定义参数
     */
    public Map<String, String> getCustomParams() {
        return this.customParams;
    }

    /**
     * url中游戏自定义参数
     */
    public CgMockLogin setCustomParams(Map<String, String> customParams) {
        this.customParams = customParams;
        return this;
    }

    public void unsetCustomParams() {
        this.customParams = null;
    }

    /**
     * Returns true if field customParams is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCustomParams() {
        return this.customParams != null;
    }

    public void setCustomParamsIsSet(boolean value) {
        if (!value) {
            this.customParams = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case SESSION_KEY:
                if (value == null) {
                    unsetSessionKey();
                } else {
                    setSessionKey((String) value);
                }
                break;

            case USER_ID:
                if (value == null) {
                    unsetUserId();
                } else {
                    setUserId((String) value);
                }
                break;

            case PARAMS:
                if (value == null) {
                    unsetParams();
                } else {
                    setParams((Map<String, String>) value);
                }
                break;

            case CUSTOM_PARAMS:
                if (value == null) {
                    unsetCustomParams();
                } else {
                    setCustomParams((Map<String, String>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case SESSION_KEY:
                return getSessionKey();

            case USER_ID:
                return getUserId();

            case PARAMS:
                return getParams();

            case CUSTOM_PARAMS:
                return getCustomParams();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case SESSION_KEY:
                return isSetSessionKey();
            case USER_ID:
                return isSetUserId();
            case PARAMS:
                return isSetParams();
            case CUSTOM_PARAMS:
                return isSetCustomParams();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof CgMockLogin)
            return this.equals((CgMockLogin) that);
        return false;
    }

    public boolean equals(CgMockLogin that) {
        if (that == null)
            return false;

        boolean this_present_sessionKey = true && this.isSetSessionKey();
        boolean that_present_sessionKey = true && that.isSetSessionKey();
        if (this_present_sessionKey || that_present_sessionKey) {
            if (!(this_present_sessionKey && that_present_sessionKey))
                return false;
            if (!this.sessionKey.equals(that.sessionKey))
                return false;
        }

        boolean this_present_userId = true && this.isSetUserId();
        boolean that_present_userId = true && that.isSetUserId();
        if (this_present_userId || that_present_userId) {
            if (!(this_present_userId && that_present_userId))
                return false;
            if (!this.userId.equals(that.userId))
                return false;
        }

        boolean this_present_params = true && this.isSetParams();
        boolean that_present_params = true && that.isSetParams();
        if (this_present_params || that_present_params) {
            if (!(this_present_params && that_present_params))
                return false;
            if (!this.params.equals(that.params))
                return false;
        }

        boolean this_present_customParams = true && this.isSetCustomParams();
        boolean that_present_customParams = true && that.isSetCustomParams();
        if (this_present_customParams || that_present_customParams) {
            if (!(this_present_customParams && that_present_customParams))
                return false;
            if (!this.customParams.equals(that.customParams))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(CgMockLogin other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        CgMockLogin typedOther = (CgMockLogin) other;

        lastComparison = Boolean.valueOf(isSetSessionKey()).compareTo(typedOther.isSetSessionKey());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSessionKey()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionKey, typedOther.sessionKey);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParams()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCustomParams()).compareTo(typedOther.isSetCustomParams());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCustomParams()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customParams, typedOther.customParams);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CgMockLogin(");
        boolean first = true;

        if (isSetSessionKey()) {
            sb.append("sessionKey:");
            if (this.sessionKey == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionKey);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("userId:");
        if (this.userId == null) {
            sb.append("null");
        } else {
            sb.append(this.userId);
        }
        first = false;
        if (isSetParams()) {
            if (!first) sb.append(", ");
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
        }
        if (isSetCustomParams()) {
            if (!first) sb.append(", ");
            sb.append("customParams:");
            if (this.customParams == null) {
                sb.append("null");
            } else {
                sb.append(this.customParams);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (userId == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not present! Struct: " + toString());
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CgMockLoginStandardSchemeFactory implements SchemeFactory {
        public CgMockLoginStandardScheme getScheme() {
            return new CgMockLoginStandardScheme();
        }
    }

    private static class CgMockLoginStandardScheme extends StandardScheme<CgMockLogin> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, CgMockLogin struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // SESSION_KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sessionKey = iprot.readString();
                            struct.setSessionKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // USER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.userId = iprot.readString();
                            struct.setUserIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PARAMS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                struct.params = new HashMap<String, String>(2 * _map0.size);
                                for (int _i1 = 0; _i1 < _map0.size; ++_i1) {
                                    String _key2; // required
                                    String _val3; // required
                                    _key2 = iprot.readString();
                                    _val3 = iprot.readString();
                                    struct.params.put(_key2, _val3);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setParamsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // CUSTOM_PARAMS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                                struct.customParams = new HashMap<String, String>(2 * _map4.size);
                                for (int _i5 = 0; _i5 < _map4.size; ++_i5) {
                                    String _key6; // required
                                    String _val7; // required
                                    _key6 = iprot.readString();
                                    _val7 = iprot.readString();
                                    struct.customParams.put(_key6, _val7);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setCustomParamsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, CgMockLogin struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.sessionKey != null) {
                if (struct.isSetSessionKey()) {
                    oprot.writeFieldBegin(SESSION_KEY_FIELD_DESC);
                    oprot.writeString(struct.sessionKey);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.userId != null) {
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeString(struct.userId);
                oprot.writeFieldEnd();
            }
            if (struct.params != null) {
                if (struct.isSetParams()) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (Map.Entry<String, String> _iter8 : struct.params.entrySet()) {
                            oprot.writeString(_iter8.getKey());
                            oprot.writeString(_iter8.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.customParams != null) {
                if (struct.isSetCustomParams()) {
                    oprot.writeFieldBegin(CUSTOM_PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.customParams.size()));
                        for (Map.Entry<String, String> _iter9 : struct.customParams.entrySet()) {
                            oprot.writeString(_iter9.getKey());
                            oprot.writeString(_iter9.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CgMockLoginTupleSchemeFactory implements SchemeFactory {
        public CgMockLoginTupleScheme getScheme() {
            return new CgMockLoginTupleScheme();
        }
    }

    private static class CgMockLoginTupleScheme extends TupleScheme<CgMockLogin> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, CgMockLogin struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.userId);
            BitSet optionals = new BitSet();
            if (struct.isSetSessionKey()) {
                optionals.set(0);
            }
            if (struct.isSetParams()) {
                optionals.set(1);
            }
            if (struct.isSetCustomParams()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetSessionKey()) {
                oprot.writeString(struct.sessionKey);
            }
            if (struct.isSetParams()) {
                {
                    oprot.writeI32(struct.params.size());
                    for (Map.Entry<String, String> _iter10 : struct.params.entrySet()) {
                        oprot.writeString(_iter10.getKey());
                        oprot.writeString(_iter10.getValue());
                    }
                }
            }
            if (struct.isSetCustomParams()) {
                {
                    oprot.writeI32(struct.customParams.size());
                    for (Map.Entry<String, String> _iter11 : struct.customParams.entrySet()) {
                        oprot.writeString(_iter11.getKey());
                        oprot.writeString(_iter11.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, CgMockLogin struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.userId = iprot.readString();
            struct.setUserIdIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.sessionKey = iprot.readString();
                struct.setSessionKeyIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.params = new HashMap<String, String>(2 * _map12.size);
                    for (int _i13 = 0; _i13 < _map12.size; ++_i13) {
                        String _key14; // required
                        String _val15; // required
                        _key14 = iprot.readString();
                        _val15 = iprot.readString();
                        struct.params.put(_key14, _val15);
                    }
                }
                struct.setParamsIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.customParams = new HashMap<String, String>(2 * _map16.size);
                    for (int _i17 = 0; _i17 < _map16.size; ++_i17) {
                        String _key18; // required
                        String _val19; // required
                        _key18 = iprot.readString();
                        _val19 = iprot.readString();
                        struct.customParams.put(_key18, _val19);
                    }
                }
                struct.setCustomParamsIsSet(true);
            }
        }
    }

}

