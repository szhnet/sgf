/**
 * Autogenerated by Thrift Compiler (0.8.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.jpower.sgf.net.msg;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * @Message(3,mainThread) 创建新角色
 */
@SuppressWarnings({"serial", "rawtypes", "unchecked"})
public class CgMockCreateRole implements org.apache.thrift.TBase<CgMockCreateRole, CgMockCreateRole._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CgMockCreateRole");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PLAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("playerName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new CgMockCreateRoleStandardSchemeFactory());
        schemes.put(TupleScheme.class, new CgMockCreateRoleTupleSchemeFactory());
    }

    public String userId; // required
    public String playerName; // required
    /**
     * 1男，2女
     */
    public int gender; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        USER_ID((short) 1, "userId"),
        PLAYER_NAME((short) 2, "playerName"),
        /**
         * 1男，2女
         */
        GENDER((short) 3, "gender");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // USER_ID
                    return USER_ID;
                case 2: // PLAYER_NAME
                    return PLAYER_NAME;
                case 3: // GENDER
                    return GENDER;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __GENDER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PLAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("playerName", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CgMockCreateRole.class, metaDataMap);
    }

    public CgMockCreateRole() {
    }

    public CgMockCreateRole(
            String userId,
            String playerName,
            int gender) {
        this();
        this.userId = userId;
        this.playerName = playerName;
        this.gender = gender;
        setGenderIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CgMockCreateRole(CgMockCreateRole other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetUserId()) {
            this.userId = other.userId;
        }
        if (other.isSetPlayerName()) {
            this.playerName = other.playerName;
        }
        this.gender = other.gender;
    }

    public CgMockCreateRole deepCopy() {
        return new CgMockCreateRole(this);
    }

    @Override
    public void clear() {
        this.userId = null;
        this.playerName = null;
        setGenderIsSet(false);
        this.gender = 0;
    }

    public String getUserId() {
        return this.userId;
    }

    public CgMockCreateRole setUserId(String userId) {
        this.userId = userId;
        return this;
    }

    public void unsetUserId() {
        this.userId = null;
    }

    /**
     * Returns true if field userId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUserId() {
        return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
        if (!value) {
            this.userId = null;
        }
    }

    public String getPlayerName() {
        return this.playerName;
    }

    public CgMockCreateRole setPlayerName(String playerName) {
        this.playerName = playerName;
        return this;
    }

    public void unsetPlayerName() {
        this.playerName = null;
    }

    /**
     * Returns true if field playerName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPlayerName() {
        return this.playerName != null;
    }

    public void setPlayerNameIsSet(boolean value) {
        if (!value) {
            this.playerName = null;
        }
    }

    /**
     * 1男，2女
     */
    public int getGender() {
        return this.gender;
    }

    /**
     * 1男，2女
     */
    public CgMockCreateRole setGender(int gender) {
        this.gender = gender;
        setGenderIsSet(true);
        return this;
    }

    public void unsetGender() {
        __isset_bit_vector.clear(__GENDER_ISSET_ID);
    }

    /**
     * Returns true if field gender is set (has been assigned a value) and false otherwise
     */
    public boolean isSetGender() {
        return __isset_bit_vector.get(__GENDER_ISSET_ID);
    }

    public void setGenderIsSet(boolean value) {
        __isset_bit_vector.set(__GENDER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case USER_ID:
                if (value == null) {
                    unsetUserId();
                } else {
                    setUserId((String) value);
                }
                break;

            case PLAYER_NAME:
                if (value == null) {
                    unsetPlayerName();
                } else {
                    setPlayerName((String) value);
                }
                break;

            case GENDER:
                if (value == null) {
                    unsetGender();
                } else {
                    setGender((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case USER_ID:
                return getUserId();

            case PLAYER_NAME:
                return getPlayerName();

            case GENDER:
                return Integer.valueOf(getGender());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case USER_ID:
                return isSetUserId();
            case PLAYER_NAME:
                return isSetPlayerName();
            case GENDER:
                return isSetGender();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof CgMockCreateRole)
            return this.equals((CgMockCreateRole) that);
        return false;
    }

    public boolean equals(CgMockCreateRole that) {
        if (that == null)
            return false;

        boolean this_present_userId = true && this.isSetUserId();
        boolean that_present_userId = true && that.isSetUserId();
        if (this_present_userId || that_present_userId) {
            if (!(this_present_userId && that_present_userId))
                return false;
            if (!this.userId.equals(that.userId))
                return false;
        }

        boolean this_present_playerName = true && this.isSetPlayerName();
        boolean that_present_playerName = true && that.isSetPlayerName();
        if (this_present_playerName || that_present_playerName) {
            if (!(this_present_playerName && that_present_playerName))
                return false;
            if (!this.playerName.equals(that.playerName))
                return false;
        }

        boolean this_present_gender = true;
        boolean that_present_gender = true;
        if (this_present_gender || that_present_gender) {
            if (!(this_present_gender && that_present_gender))
                return false;
            if (this.gender != that.gender)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(CgMockCreateRole other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        CgMockCreateRole typedOther = (CgMockCreateRole) other;

        lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlayerName()).compareTo(typedOther.isSetPlayerName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlayerName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerName, typedOther.playerName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGender()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CgMockCreateRole(");
        boolean first = true;

        sb.append("userId:");
        if (this.userId == null) {
            sb.append("null");
        } else {
            sb.append(this.userId);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("playerName:");
        if (this.playerName == null) {
            sb.append("null");
        } else {
            sb.append(this.playerName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("gender:");
        sb.append(this.gender);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (userId == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not present! Struct: " + toString());
        }
        if (playerName == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'playerName' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'gender' because it's a primitive and you chose the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CgMockCreateRoleStandardSchemeFactory implements SchemeFactory {
        public CgMockCreateRoleStandardScheme getScheme() {
            return new CgMockCreateRoleStandardScheme();
        }
    }

    private static class CgMockCreateRoleStandardScheme extends StandardScheme<CgMockCreateRole> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, CgMockCreateRole struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // USER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.userId = iprot.readString();
                            struct.setUserIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PLAYER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.playerName = iprot.readString();
                            struct.setPlayerNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // GENDER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.gender = iprot.readI32();
                            struct.setGenderIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetGender()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'gender' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, CgMockCreateRole struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.userId != null) {
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeString(struct.userId);
                oprot.writeFieldEnd();
            }
            if (struct.playerName != null) {
                oprot.writeFieldBegin(PLAYER_NAME_FIELD_DESC);
                oprot.writeString(struct.playerName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(GENDER_FIELD_DESC);
            oprot.writeI32(struct.gender);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CgMockCreateRoleTupleSchemeFactory implements SchemeFactory {
        public CgMockCreateRoleTupleScheme getScheme() {
            return new CgMockCreateRoleTupleScheme();
        }
    }

    private static class CgMockCreateRoleTupleScheme extends TupleScheme<CgMockCreateRole> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, CgMockCreateRole struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.userId);
            oprot.writeString(struct.playerName);
            oprot.writeI32(struct.gender);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, CgMockCreateRole struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.userId = iprot.readString();
            struct.setUserIdIsSet(true);
            struct.playerName = iprot.readString();
            struct.setPlayerNameIsSet(true);
            struct.gender = iprot.readI32();
            struct.setGenderIsSet(true);
        }
    }

}

